[함수 정의] calculate_iou(박스1, 박스2):

[메인 로직]
1. 설정값들 정의 (이미지 크기, 개수, IoU 한계치, 결과 저장 경로 등)
2. (신규) 배경 이미지들이 있는 폴더 경로 정의
3. 결과 저장할 폴더들 생성
4. (신규) 배경 이미지 폴더 안의 모든 파일 경로를 읽어 리스트로 만들어두기
5. MNIST 데이터 불러오기

6. 만들 이미지 개수만큼 [바깥 루프] 시작:
    가. (변경점) 배경 이미지 경로 리스트에서 랜덤으로 경로 하나 선택
    나. (변경점) 해당 경로의 이미지 파일을 열기
    다. (변경점) 이미지를 표준 RGB 색상 모드로 변환
    라. (변경점) 이미지를 설정된 크기로 리사이즈하여 최종 배경으로 사용
    마. 이번 이미지의 라벨/박스 정보를 저장할 빈 리스트들 생성
    바. 배치할 숫자 개수(2~3개)를 무작위로 결정

    사. 성공적으로 배치된 박스 개수가 목표 개수보다 적은 동안 [중간 루프] 반복:
    - (안전장치) 시도(attempt) 횟수 100번(max_attempts)으로 제한, 배치 성공 여부 변수(placed) False로 초기화
    - 시도 횟수가 100번보다 적은 동안 [안쪽 루프] 반복:
        1. 랜덤크기, 랜덤 위치로 '후보 박스'(candidate_box) 하나 생성
        - "겹친다" 변수(is_overlapping) False로 초기화 
        2. '후보 박스'와 이미 '배치된 박스들'을 하나씩 비교하며 충돌 검사:
            - iou = calculate_iou(후보박스, 이미 배치된 박스(placed_boxes))
            - 만약 iou > 한계치(IOS_THRESHOLD)이면:
                - "겹친다"고 표시하고 검사 중단
        3. 만약 "겹치지 않는다"(not is_overlapping)고 판단되면:
            - 배경 이미지에 후보 숫자를 붙여넣기
            - 라벨 리스트(label_list)에 후보 박스의 라벨 정보(label_string) 추가
            - '이미 배치된 박스들' 리스트에 후보 박스 정보 추가
            - 배치 성공 여부(placed)를 True로 변경
            - [안쪽 루프] 빠져나가기 (break)
        4. 겹쳤다면 시도 횟수 1 증가
    
    - 만약 배치에 최종 실패했다면(placed가 False이면):
        - 이번 이미지 생성을 포기하고 [중간 루프] 빠져나가기 (break)
    
    6. 만약 목표한 개수만큼 배치가 다 성공했다면:
        - 최종 이미지를 파일(image_filename)로 저장
        - 라벨 리스트(label_list)에 있는 모든 라벨을 텍스트 파일(label_filename) 하나에 저장

7. 모든 작업 완료 메시지 출력